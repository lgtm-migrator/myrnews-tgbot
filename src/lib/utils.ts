import type { InlineKeyboardButton, InlineKeyboardMarkup } from 'telegram-typings';
import { Markup } from 'telegraf';
import type { PostData, UserReactionStats } from '../types';

export const TEXT_LIKE = 'üëç';
export const TEXT_HEART = '‚ù§Ô∏è';
export const TEXT_SHIP = 'üö¢';
export const TEXT_SKULL = '‚ò†Ô∏è';

export function buildInlineKeyboardFromPost({ id, link }: PostData): InlineKeyboardButton[][] {
    return [
        [Markup.urlButton('–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ‚Ä¶', link)],
        [
            Markup.callbackButton(TEXT_LIKE, `L:${id}`),
            Markup.callbackButton(TEXT_HEART, `H:${id}`),
            Markup.callbackButton(TEXT_SHIP, `S:${id}`),
            Markup.callbackButton(TEXT_SKULL, `B:${id}`),
        ],
    ];
}

export function buildInlineKeyboardFromMarkup(
    markup: InlineKeyboardMarkup | undefined,
    { likes, hearts, ships, skulls }: UserReactionStats,
    postId: number,
): InlineKeyboardButton[][] {
    return [
        [
            markup && markup.inline_keyboard[0] && markup.inline_keyboard[0][0]
                ? markup.inline_keyboard[0][0]
                : Markup.urlButton('–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ‚Ä¶', `https://myrotvorets.news/?p=${postId}`),
        ],
        [
            Markup.callbackButton(likes ? `${TEXT_LIKE} √ó${likes}` : `${TEXT_LIKE}`, `L:${postId}`),
            Markup.callbackButton(hearts ? `${TEXT_HEART} √ó${hearts}` : `${TEXT_HEART}`, `H:${postId}`),
            Markup.callbackButton(ships ? `${TEXT_SHIP} √ó${ships}` : `${TEXT_SHIP}`, `S:${postId}`),
            Markup.callbackButton(skulls ? `${TEXT_SKULL} √ó${skulls}` : `${TEXT_SKULL}`, `B:${postId}`),
        ],
    ];
}

export function generateDescription({ link, title, excerpt }: PostData): string {
    const a = `<a href="${link}">${title}</a>`;
    if (a.length > 1000) {
        const base = `<a href="${link}"></a>`;
        const remLen = 1000 - base.length;
        if (remLen <= 50) {
            const description = excerpt.slice(0, 1000);
            const ellipsis = description === excerpt ? '' : '‚Ä¶';
            return `${description}${ellipsis}`;
        }

        const t = title.slice(0, remLen);
        return `<a href="${link}">${t}‚Ä¶</a>`;
    }

    const len = 1000 - a.length;
    if (len >= 100) {
        const description = excerpt.slice(0, len);
        const ellipsis = description === excerpt ? '' : '‚Ä¶';
        return `${a}\n\n<em>${description}${ellipsis}</em>`;
    }

    return a;
}
